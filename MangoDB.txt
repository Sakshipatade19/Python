Practical 2:- Practical No. 2: Performing MongoDB CRUD Operations
// Use 'Users' collection
use Users;

// Insert sample data
db.users.insertMany([
  { name: "Angela", age: 27 },
  { name: "Neha", age: 27 },
  { name: "Riya", age: 30 },
  { name: "Jim", age: 32 },
  { name: "Can", age: 22 }
]);

// Step 1: Show Databases
show dbs;

// Step 2: Create Database
db.createCollection("Users");

// Step 3: Insert one document
db.users.insertOne({ name: "Angela", age: 27 });

// Insert multiple documents
db.users.insertMany([
  { name: "Neha", age: 27 },
  { name: "Riya", age: 30 },
  { name: "Jim", age: 32 },
  { name: "Can", age: 22 }
]);

// Step 5: Retrieve all values
db.users.find();

// Retrieve documents with condition
db.users.find({ age: { $gt: 25 } }, { name: 1, age: 1 });

// Find one document
db.users.findOne({ name: "Neha" });

// Step 6: Update one document
db.users.updateOne({ name: "Neha" }, { $set: { email: "neha@gmail.com" } });

// Update multiple documents
db.users.updateMany({ age: { $lt: 30 } }, { $set: { name: "Neha" } });

// Step 7: Delete one document
db.users.deleteOne({ name: "Neha" });

// Delete multiple documents
db.users.deleteMany({ age: { $lt: 30 } });






Practical No. 3: Performing MongoDB Aggregation Operations
// Use 'sales' collection
use sales;

// Insert sales data
db.sales.insertMany([
  { product: "Americano", size: "Small", quantity: 10 },
  { product: "Americano", size: "Medium", quantity: 15 },
  { product: "Latte", size: "Large", quantity: 20 }
]);

Aggregation Operations Code
// Filter by product 'Americano' and group by size, then sum the quantities
db.sales.aggregate([
  { $match: { product: "Americano" } },
  { $group: { _id: "$size", totalQuantity: { $sum: "$quantity" } } },
  { $sort: { totalQuantity: -1 } }
]);







Practical No. 4: Performing Sorting in MongoDB
Dataset for Sorting Operations
// Use 'cars' collection
use cars;

// Insert car data
db.cars.insertMany([
  { make: "Toyota", year: 2020, price: 30000, brand: "Corolla" },
  { make: "Honda", year: 2019, price: 28000, brand: "Civic" },
  { make: "Tesla", year: 2021, price: 60000, brand: "Model S" }
]);



db.vehicle_info.find({},{make:1,_id:0}).sort({"make":1})

db.vehicle_info.find({},{make:1,_id:0}).sort({"make":-1})


db.vehicle_info.find({},{_id:0}).sort({"make":1,"price":1})

db.vehicle_info.find({},{_id:0}).sort({"year":1}).skip(4).pretty()

db.vehicle_info.find({},{_id:0}).sort({"year":1}).skip(4).pretty()


// Sort by year
db.cars.find().sort({ year: 1 });

// Sort by brand name and display "make"
db.cars.find({}, { make: 1 }).sort({ brand: 1 });

// Sort by brand name in reverse order
db.cars.find().sort({ brand: -1 });

// Sort by make and price
db.cars.find().sort({ make: 1, price: 1 });

// Sort by year and make, displaying the first 2 records
db.cars.find().sort({ year: 1, make: 1 }).limit(2);

// Sort by year, skipping the first 4 values
db.cars.find().sort({ year: 1 }).skip(4);








Practical No. 5: Performing MongoDB Comparison Operators
Dataset for Comparison Operators
// Use 'inventory' collection
use inventory;

// Insert inventory data
db.inventory.insertMany([
  { _id: "LS0000123", name: "XYZ Chocolate Bar 100g", price: 5.23, quantity: 25000 },
  { _id: "LS0003123", name: "Milk Non-Fat 1lt", price: 3.00, quantity: 1000 },
  { _id: "LS0004566", name: "Eggs 12 Pack", price: 6.00, quantity: 5000 }
]);


Comparison Operators Code
// Using $eq operator
db.inventory.find({ "_id": { $eq: "LS0003123" }}).pretty();

// Using $gt operator
db.inventory.find({ "quantity": { $gt: 5000 }}).pretty();

// Using $lt operator
db.inventory.find({ "quantity": { $lt: 5000 }}).pretty();

// Using $gte operator
db.inventory.find({ "quantity": { $gte: 12000 }}).pretty();

// Using $lte operator
db.inventory.find({ "quantity": { $lte: 1000 }}).pretty();

// Using $ne operator
db.inventory.find({ "price": { $ne: 5.23 }}).pretty();






Practical No. 6 : Dataset for the 6th Practical (MongoDB Logical Operators)

// Creating the 'products' collection for MongoDB logical operators
db.products.insertMany([
  { "name": "Laptop", "category": "Electronics", "price": 85000, "quantity": 50, "inStock": true },
  { "name": "Smartphone", "category": "Electronics", "price": 40000, "quantity": 100, "inStock": true },
  { "name": "Washing Machine", "category": "Home Appliances", "price": 25000, "quantity": 30, "inStock": false },
  { "name": "Refrigerator", "category": "Home Appliances", "price": 30000, "quantity": 20, "inStock": true },
  { "name": "Air Conditioner", "category": "Home Appliances", "price": 45000, "quantity": 10, "inStock": true },
  { "name": "Table", "category": "Furniture", "price": 8000, "quantity": 25, "inStock": false },
  { "name": "Chair", "category": "Furniture", "price": 3500, "quantity": 60, "inStock": true },
  { "name": "Shoes", "category": "Fashion", "price": 3000, "quantity": 150, "inStock": true },
  { "name": "Jacket", "category": "Fashion", "price": 4500, "quantity": 80, "inStock": false },
  { "name": "Bookshelf", "category": "Furniture", "price": 5000, "quantity": 40, "inStock": true }
])


$and (Logical AND)
Find products that are both in the "Electronics" category and have a price greater than 50000.
db.products.find({
  $and: [
    {category: "Electronics"},
    {price: {$gt: 50000}}
  ]
}).pretty()


$or (Logical OR)
Find products that are either in the "Home Appliances" category or are currently out of stock.
db.products.find({
  $or: [
    {category: "Home Appliances"},
    {inStock: false}
  ]
}).pretty()


$not (Logical NOT)
Find products that do not have a price less than 10000.
db.products.find({
  price: {$not: {$lt: 10000}}
}).pretty()



Combining $and and $or
Find products that are in the "Furniture" category and either have a price less than 5000 or are out of stock.
db.products.find({
  $and: [
    {category: "Furniture"},
    {
      $or: [
        {price: {$lt: 5000}},
        {inStock: false}
      ]
    }
  ]
}).pretty()




Practical No. 7: Performing MongoDB $abs, $floor, and $ceil Operations
Dataset for $abs, $floor, $ceil Operations
// Use 'student' collection
use student;

// Insert student data
db.student.insertMany([
  { std_name: "Micky", gender: "Female", class: "X", fees: 5000, exam_fees: 500, age: 16, Total_marks: 405 },
  { std_name: "Thomas", gender: "Male", class: "X", fees: 3000, exam_fees: 500, age: 12, Total_marks: 450 }
]);


$abs, $floor, $ceil Operations Code
// $abs operation
db.student.aggregate([
  { $match: { gender: "Female" } },
  { $project: { std_name: 1, Total_fees: { $abs: { $add: ["$fees", "$exam_fees"] } } } }
]);

// $floor operation
db.student.aggregate([
  { $match: { gender: "Female" } },
  { $project: { std_name: 1, floor_grade: { $floor: "$Total_marks" } } }
]);

// $ceil operation
db.student.aggregate([
  { $match: { gender: "Female" } },
  { $project: { std_name: 1, ceiling_grade: { $ceil: "$Total_marks" } } }
]);






Practical No. 8: Performing MongoDB $log, $mod, $divide, and $multiply Operations
Dataset for $log, $mod, $divide, $multiply Operations
// Use 'Mobile' collection
use Mobile;

// Insert mobile data
db.Mobile.insertMany([
  { name: "Redmi", area: 67, Total_Price: 40000, quantity: 4 },
  { name: "Oppo", area: 46, Total_Price: 50000, quantity: 45 }
]);


$log, $mod, $divide, $multiply Operations Code
// $log operation
db.Mobile.aggregate([
  { $match: { name: "Oppo" } },
  { $project: { name: 1, logArea: { $log: ["$area", 10] } } }
]);

// $mod operation
db.Mobile.aggregate([
  { $match: { name: "Oppo" } },
  { $project: { name: 1, remainderValue: { $mod: ["$Total_Price", "$quantity"] } } }
]);

// $divide operation
db.Mobile.aggregate([
  { $match: { name: "Oppo" } },
  { $project: { name: 1, Result: { $divide: ["$quantity", "$area"] } } }
]);

// $multiply operation
db.Mobile.aggregate([
  { $match: { name: "Oppo" } },
  { $project: { name: 1, Result: { $multiply: ["$quantity", "$area"] } } }
]);














Practical No. 9: Performing MongoDB $pow, $sqrt, and $subtract Operations
Dataset for $pow, $sqrt, $subtract Operations
// Use 'Mobile' collection (same as practical 8)
use Mobile;

// Creating the 'shapes' collection
db.shapes.insertMany([
  { "name": "Square", "side": 4, "area": 16 },
  { "name": "Circle", "radius": 7, "area": 154 },
  { "name": "Rectangle", "length": 8, "width": 4, "area": 32 },
  { "name": "Triangle", "base": 5, "height": 10, "area": 25 },
  { "name": "Pentagon", "side": 6, "area": 93 },
  { "name": "Hexagon", "side": 10, "area": 259 }
])


$pow (Power): You can calculate the power of certain fields like raising a radius or side length to a power.
db.shapes.aggregate([
  {$project: {name: 1, sideSquared: {$pow: ["$side", 2]}}}
])


$sqrt (Square Root): You can calculate the square root of areas for shapes.
db.shapes.aggregate([
  {$project: {name: 1, sqrtArea: {$sqrt: "$area"}}}
])


$subtract (Subtraction): For shapes like rectangles, you can subtract one dimension from another.
db.shapes.aggregate([
  {$project: {name: 1, lengthMinusWidth: {$subtract: ["$length", "$width"]}}}
])







Practical 10: $trunc, $round, $compare Operations

// Creating 'shapes' collection for $trunc, $round, and $cmp operations
db.shapes.insertMany([
  { "name": "Pen", "length": 11.25, "width": 2.15, "area": 24.1875 },
  { "name": "Pencil", "length": 15.32, "width": 1.45, "area": 22.274 },
  { "name": "Box", "length": 20.97, "width": 10.47, "area": 219.56 },
  { "name": "Bottle", "length": -12.30, "width": 4.55, "area": -56.015 },
  { "name": "Oval", "length": 18.67, "width": 8.22, "area": 153.522 },
  { "name": "Triangle", "length": 9.73, "width": 7.98, "area": 38.8431 }
])


$trunc (Truncate)

Truncate the length and width of shapes to remove decimal places.
db.shapes.aggregate([
  {$project: {name: 1, lengthTruncated: {$trunc: "$length"}, widthTruncated: {$trunc: "$width"}}}
])


$round (Round)
Round the area values to the nearest whole number.
db.shapes.aggregate([
  {$project: {name: 1, roundedArea: {$round: ["$area", 0]}}}
])


$cmp (Comparison)
Compare the length and width of the shapes.
db.shapes.aggregate([
  {$project: {name: 1, compareLengthWidth: {$cmp: ["$length", "$width"]}}}
])






Practical 11: $concat, $size, $rename Operations

// Creating 'students' collection for $concat, $size, and $rename operations
db.students.insertMany([
  {
    "_id": 1,
    "firstName": "Steve",
    "lastName": "Smith",
    "class": "10th",
    "marks": [85, 78, 92, 65, 89],
    "extraMarks": {
      "practical": [15, 17, 18],
      "attendance": [9, 10]
    }
  },
  {
    "_id": 2,
    "firstName": "Sandy",
    "lastName": "Beach",
    "class": "9th",
    "marks": [75, 68, 88, 90, 79],
    "extraMarks": {
      "practical": [20, 15, 19],
      "attendance": [10, 9]
    }
  },
  {
    "_id": 3,
    "firstName": "John",
    "lastName": "Cena",
    "class": "12th",
    "marks": [95, 89, 85, 91, 88],
    "extraMarks": {
      "practical": [25, 18, 22],
      "attendance": [10, 10]
    }
  },
  {
    "_id": 4,
    "firstName": "David",
    "lastName": "Silva",
    "class": "11th",
    "marks": [78, 82, 91, 84, 79],
    "extraMarks": {
      "practical": [19, 18, 20],
      "attendance": [9, 9]
    }
  }
])





$concat (Concatenation)

Concatenate the first name and last name of students.
db.students.aggregate([
  {$project: {fullName: {$concat: ["$firstName", " ", "$lastName"]}, class: 1, marks: 1}}
])


$size (Array Size)

Find the size of the marks array for each student.
db.students.aggregate([
  {$project: {name: {$concat: ["$firstName", " ", "$lastName"]}, marksSize: {$size: "$marks"}}}
])


$rename (Rename Fields)

Rename the "extraMarks.practical" field to "practicalMarks" for all students.
db.students.updateMany(
  {},
  {$rename: {"extraMarks.practical": "practicalMarks"}}
)













